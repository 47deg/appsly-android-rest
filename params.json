{"google":"UA-18433785-2","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Android client library for RESTful services","body":"# RESTrung\r\n\r\nAndroid client library for [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer) services\r\n\r\n# Introduction\r\n\r\nRESTrung was born out of the need to provide a clear and easy interface for Android apps @ [47 Degrees](http://47deg.com) to interface with RESTful and HTTP based web services.\r\nContributions and constructive feedback are welcome.\r\n\r\n# Download\r\n\r\n## Maven Dependency\r\n\r\nRESTrung may be automatically imported into your project if you already use [Maven](http://maven.apache.org/). Just declare RESTrung as a maven dependency.\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>it.restrung</groupId>\r\n    <artifactId>restrung</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n    <type>apklib</type>\r\n</dependency>\r\n```\r\n## APKLib and others\r\n\r\nYou can get releases, snapshots and other forms in which RESTrung is distributed from the [Downloads](https://github.com/47deg/restrung/downloads) page.\r\n\r\n# Usage\r\n\r\nWhether you plan to use RESTrung for simple HTTP requests to a RESTful service or you need more control over requests, serialization, etc,\r\nwe encourage you to read this short guide to fully understand what RESTrung is and what it is not.\r\n\r\n## Simple\r\n\r\nThe main interface to send requests and receive serialized responses is through RestClient whose default implementation you can access with the RestClientFactory.\r\nThe RestClient exposes both Asynchronous and Synchronous operations for the most common [HTTP verbs](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html).\r\n\r\n### GET\r\n\r\n```java\r\nRestClientFactory.getClient().getAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    @Override\r\n\tpublic void onResults(Target response) {\r\n\t\t//handle results here in the main thread\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(Throwable e) {\r\n\t\t//handle errors here in the main thread\r\n\t}\r\n\r\n}, \"http://url/%s/%s\", \"param1\", \"param2\");\r\n```\r\n\r\n### POST\r\n\r\n*Simple POST*\r\n\r\n```java\r\n//An object that implements JSONSerializable\r\nAnyBeanObject sourceObject = new AnyBeanObject();\r\nsourceObject.setName(\"name\");\r\n\r\nRestClientFactory.getClient().postAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    @Override\r\n\tpublic void onResults(Target response) {\r\n\t\t//handle results here in the main thread\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(Throwable e) {\r\n\t\t//handle error here in the main thread\r\n\t}\r\n\r\n}, \"http://url/%s/%s\", sourceObject , \"param1\", \"param2\");\r\n```\r\n\r\n*Multipart POST*\r\n\r\n```java\r\nFile file = ....;\r\n\r\n//An object that implements JSONSerializable\r\nAnyBeanObject sourceObject = new AnyBeanObject();\r\nsourceObject.setName(\"name\");\r\n\r\nRestClientFactory.getClient().postAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    @Override\r\n\tpublic void onResults(Target response) {\r\n\t\t//handle results here in the main thread\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(Throwable e) {\r\n\t\t//handle error here in the main thread\r\n\t}\r\n\r\n}, \"http://url/%s/%s\", sourceObject, file , \"param1\", \"param2\");\r\n```\r\n\r\n### PUT\r\n\r\n```java\r\n//An object that implements JSONSerializable\r\nAnyBeanObject sourceObject = new AnyBeanObject();\r\nsourceObject.setName(\"name\");\r\n\r\nRestClientFactory.getClient().putAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    @Override\r\n\tpublic void onResults(Target response) {\r\n\t\t//handle results here in the main thread\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(Throwable e) {\r\n\t\t//handle error here in the main thread\r\n\t}\r\n\r\n}, \"http://url/%s/%s\", sourceObject , \"param1\", \"param2\");\r\n```\r\n\r\n### DELETE\r\n\r\n```java\r\nRestClientFactory.getClient().deleteAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    @Override\r\n\tpublic void onResults(Target response) {\r\n\t\t//handle results here in the main thread\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(Throwable e) {\r\n\t\t//handle error here in the main thread\r\n\t}\r\n\r\n}, \"http://url/%s/%s\", \"param1\", \"param2\");\r\n```\r\n\r\n## Advanced\r\n\r\nIf you do not wish to use the RestClientFactory and RestClient interfaces you can get finer control by directly utilizing any of the\r\nloaders, asynctasks or runnable classes for each one of the operations.\r\n\r\n### Loaders\r\n\r\n* GET - [it.restrung.rest.async.loaders.APIGetLoader](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/loaders/APIGetLoader.java)\r\n* POST - [it.restrung.rest.async.loaders.APIPostLoader](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/loaders/APIPostLoader.java)\r\n* PUT - [it.restrung.rest.async.loaders.APIPutLoader](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/loaders/APIPutLoader.java)\r\n* DELETE - [it.restrung.rest.async.loaders.APIDeleteLoader](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/loaders/APIDeleteLoader.java)\r\n\r\n### AsyncTasks\r\n\r\n* GET - [it.restrung.rest.async.asynctasks.APIGetAsyncTask](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/asynctasks/APIGetAsyncTask.java)\r\n* POST - [it.restrung.rest.async.asynctasks.APIPostAsyncTask](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/asynctasks/APIPostAsyncTask.java)\r\n* PUT - [it.restrung.rest.async.asynctasks.APIPutAsyncTask](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/asynctasks/APIPutAsyncTask.java)\r\n* DELETE - [it.restrung.rest.async.asynctasks.APIDeleteAsyncTask](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/asynctasks/APIDeleteAsyncTask.java)\r\n\r\n### Runnables\r\n\r\n* GET - [it.restrung.rest.async.runnables.GetRunnable](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/runnables/GetRunnable.java)\r\n* POST - [it.restrung.rest.async.runnables.PostRunnable](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/runnables/PostRunnable.java)\r\n* PUT - [it.restrung.rest.async.runnables.PutRunnable](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/runnables/PutRunnable.java)\r\n* DELETE - [it.restrung.rest.async.runnables.DeleteRunnable](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/async/runnables/DeleteRunnable.java)\r\n\r\n### Cache\r\n\r\nRESTrung includes a cache mechanism to help with fast retrieval of GET responses.\r\nRESTrung uses the request parameters and components to create a unique ID used as the cache key.\r\n\r\ne.g.\r\n\r\n*Load always from cache*\r\n\r\n```java\r\nRestClientFactory.getClient().getAsync(\r\n    new ContextAwareAPIDelegate<Target>(context, Target.class, RequestCache.LoadPolicy.ENABLED) {\r\n\r\n...\r\n\r\n}, \"http://url/%s/%s\", \"param1\", \"param2\");\r\n```\r\n\r\n*Load from cache if there is no internet connection*\r\n\r\n```java\r\nRestClientFactory.getClient().getAsync(\r\n    new ContextAwareAPIDelegate<Target>(context, Target.class, RequestCache.LoadPolicy.LOAD_IF_OFFLINE) {\r\n\r\n...\r\n\r\n}, \"http://url/%s/%s\", \"param1\", \"param2\");\r\n```\r\n\r\n#### Load Policies\r\n\r\nThe cache load policies available are:\r\n\r\n* NEVER - Never use the cache.\r\n* LOAD_IF_OFFLINE - Load from the cache when the app is offline.\r\n* LOAD_ON_ERROR - Load from cache if there is an error.\r\n* ETAG - Load from the cache if we have data stored and the server returns a 304 (not modified) response.\r\n* ENABLED - Load always from the cache if available.\r\n* LOAD_IF_TIMEOUT - Load from the cache when the request times out.\r\n* NETWORK_ENABLED - Load from the cache then refresh the cache with a network call (calls onResult in the APIDelegate twice)\r\n\r\n#### Direct access\r\n\r\nAccess objects in the cache, invalidate, put and perform many other operations directly via the static methods available through the\r\n[it.restrung.rest.cache.RequestCache](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/cache/RequestCache.java) class.\r\n\r\n### Serialization\r\n\r\nRESTrung comes with abstract classes that implement most of the tedious work related to serialize/deserialize [javabeans](http://en.wikipedia.org/wiki/JavaBeans) to and from [JSON](http://en.wikipedia.org/wiki/JSON).\r\nTo have your beans auto-serialized when being sent as the body of both POST and PUT requests; make your class extend from\r\n[it.restrung.rest.marshalling.request.AbstractJSONRequest](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/marshalling/request/AbstractJSONRequest.java) or provide your\r\nown implementation of [it.restrung.rest.marshalling.request.JSONSerializable](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/marshalling/request/JSONSerializable.java)\r\n\r\nTo have your beans auto-serialized when receiving a response body; make your class extend from\r\n[it.restrung.rest.marshalling.response.AbstractJSONResponse](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/marshalling/response/AbstractJSONResponse.java) or provide your\r\nown implementation of [it.restrung.rest.marshalling.response.JSONResponse](https://github.com/47deg/restrung/blob/master/src/main/java/it/restrung/rest/marshalling/response/JSONResponse.java)\r\n\r\n### Interceptors\r\n\r\nYou can customize the request before transmitting by overriding **onRequest(RequestOperation)** in your APIDelegate.\r\nIf you wish to customize the response before being deserialized, simply override **onResponse(ResponseOperation)** in your APIDelegate.\r\n\r\ne.g.\r\n\r\n```java\r\nRestClientFactory.getClient().getAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    ...\r\n\r\n    public void onRequest(RequestOperation operation) {\r\n        //add request headers, setup basic auth, ...\r\n    }\r\n\r\n    public void onResponse(ResponseOperation operation) {\r\n        // intercept status code, ...\r\n    }\r\n\r\n}, \"http://url/%s/%s\", \"param1\", \"param2\");\r\n```\r\n\r\n\r\n\r\n","name":"RESTrung"}