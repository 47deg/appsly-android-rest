{"body":"# Restrung\r\n\r\nAndroid client library to [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer) services\r\n\r\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\r\n\r\n- [Restrung](#restrung)\r\n- [Introduction](#introduction)\r\n- [Download](#download)\r\n\t- [Maven Dependency](#maven-dependency)\r\n\t- [APKLib and others](#apklib-and-others)\r\n- [Usage](#usage)\r\n\t- [Simple](#simple)\r\n\t\t- [GET](#get)\r\n\t\t- [POST](#post)\r\n\t\t- [PUT](#put)\r\n\t\t- [DELETE](#delete)\r\n\t- [Advanced](#advanced)\r\n\t\t- [Loaders](#loaders)\r\n\t\t- [AsyncTasks](#asynctasks)\r\n\t\t- [Runnables](#runnables)\r\n\t\t- [Cache](#cache)\r\n\t\t\t- [Load Policies](#load-policies)\r\n\t\t\t- [Direct access](#direct-access)\r\n\t\t- [Serialization](#serialization)\r\n\t\t- [Interceptors](#interceptors)\r\n\r\n# Introduction\r\n\r\nRestrung was born out of the need to provide a clear and easy interface for Android apps @ [47 degrees](http://47deg.com) to RESTful and HTTP based web services.\r\nContributions and constructive feedback are welcome.\r\n\r\n# Download\r\n\r\n## Maven Dependency\r\n\r\nRestrung may be automatically imported in your project if you already use [Maven](http://maven.apache.org/). Just declare restrung as a maven dependency.\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>org.restrung</groupId>\r\n    <artifactId>restrung</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n## APKLib and others\r\n\r\nYou can get releases, snapshots and other forms in which Restrung is distributed in the [Downloads](https://github.com/47deg/restrung/downloads) page.\r\n\r\n# Usage\r\n\r\nWhether you plan to use Restrung for simple http requests to a RESTful service or you need more control over requests, serialization, etc.\r\nWe encourage you to read this short guide to fully understand what RESTRung is and what's not.\r\n\r\n## Simple\r\n\r\nThe main interface to send requests and receive serialize responses is through the RestClient which default implementation you can access with the RestClientFactory\r\nThe RestClient exposes both Asynchronous and Synchronous operations for the most commons [HTTP verbs](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html).\r\n\r\n### GET\r\n\r\n```java\r\nRestClientFactory.getClient().getAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    @Override\r\n\tpublic void onResults(Target response) {\r\n\t\t//handle results here in the main thread\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(Throwable e) {\r\n\t\t//handle error here in the main thread\r\n\t}\r\n\r\n}, \"http://url/%s/%s\", \"param1\", \"param2\");\r\n```\r\n\r\n### POST\r\n\r\n*Simple POST*\r\n\r\n```java\r\n//An object that implements JSONSerializable\r\nAnyBeanObject sourceObject = new AnyBeanObject();\r\nsourceObject.setName(\"name\");\r\n\r\nRestClientFactory.getClient().postAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    @Override\r\n\tpublic void onResults(Target response) {\r\n\t\t//handle results here in the main thread\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(Throwable e) {\r\n\t\t//handle error here in the main thread\r\n\t}\r\n\r\n}, \"http://url/%s/%s\", sourceObject , \"param1\", \"param2\");\r\n```\r\n\r\n*Multipart POST*\r\n\r\n```java\r\nFile file = ....;\r\n\r\n//An object that implements JSONSerializable\r\nAnyBeanObject sourceObject = new AnyBeanObject();\r\nsourceObject.setName(\"name\");\r\n\r\nRestClientFactory.getClient().postAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    @Override\r\n\tpublic void onResults(Target response) {\r\n\t\t//handle results here in the main thread\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(Throwable e) {\r\n\t\t//handle error here in the main thread\r\n\t}\r\n\r\n}, \"http://url/%s/%s\", sourceObject, file , \"param1\", \"param2\");\r\n```\r\n\r\n### PUT\r\n\r\n```java\r\n//An object that implements JSONSerializable\r\nAnyBeanObject sourceObject = new AnyBeanObject();\r\nsourceObject.setName(\"name\");\r\n\r\nRestClientFactory.getClient().putAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    @Override\r\n\tpublic void onResults(Target response) {\r\n\t\t//handle results here in the main thread\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(Throwable e) {\r\n\t\t//handle error here in the main thread\r\n\t}\r\n\r\n}, \"http://url/%s/%s\", sourceObject , \"param1\", \"param2\");\r\n```\r\n\r\n### DELETE\r\n\r\n```java\r\nRestClientFactory.getClient().deleteAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    @Override\r\n\tpublic void onResults(Target response) {\r\n\t\t//handle results here in the main thread\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(Throwable e) {\r\n\t\t//handle error here in the main thread\r\n\t}\r\n\r\n}, \"http://url/%s/%s\", \"param1\", \"param2\");\r\n```\r\n\r\n## Advanced\r\n\r\nIf you don't wish to use the RestClientFactory and RestClient interfaces you can get finer control by directly utilizing any of the\r\nloaders, asynctasks or runnable classes for each one of the operations.\r\n\r\n### Loaders\r\n\r\n* GET - [org.restrung.rest.async.loaders.APIGetLoader](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/loaders/APIGetLoader.java)\r\n* POST - [org.restrung.rest.async.loaders.APIPostLoader](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/loaders/APIPostLoader.java)\r\n* PUT - [org.restrung.rest.async.loaders.APIPutLoader](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/loaders/APIPutLoader.java)\r\n* DELETE - [org.restrung.rest.async.loaders.APIDeleteLoader](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/loaders/APIDeleteLoader.java)\r\n\r\n### AsyncTasks\r\n\r\n* GET - [org.restrung.rest.async.asynctasks.APIGetAsyncTask](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/asynctasks/APIGetAsyncTask.java)\r\n* POST - [org.restrung.rest.async.asynctasks.APIPostAsyncTask](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/asynctasks/APIPostAsyncTask.java)\r\n* PUT - [org.restrung.rest.async.asynctasks.APIPutAsyncTask](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/asynctasks/APIPutAsyncTask.java)\r\n* DELETE - [org.restrung.rest.async.asynctasks.APIDeleteAsyncTask](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/asynctasks/APIDeleteAsyncTask.java)\r\n\r\n### Runnables\r\n\r\n* GET - [org.restrung.rest.async.runnables.GetRunnable](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/runnables/GetRunnable.java)\r\n* POST - [org.restrung.rest.async.runnables.PostRunnable](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/runnables/PostRunnable.java)\r\n* PUT - [org.restrung.rest.async.runnables.PutRunnable](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/runnables/PutRunnable.java)\r\n* DELETE - [org.restrung.rest.async.runnables.DeleteRunnable](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/async/runnables/DeleteRunnable.java)\r\n\r\n### Cache\r\n\r\nRestrung includes a cache mechanism to help fast retrieval of GET request responses.\r\nRestrung uses the request parameters and components to create a unique ID used as cache key.\r\n\r\ne.g.\r\n\r\n*Load always from cache*\r\n\r\n```java\r\nRestClientFactory.getClient().getAsync(\r\n    new ContextAwareAPIDelegate<Target>(context, Target.class, RequestCache.LoadPolicy.ENABLED) {\r\n\r\n...\r\n\r\n}, \"http://url/%s/%s\", \"param1\", \"param2\");\r\n```\r\n\r\n*Load always from cache if there is no internet connection*\r\n\r\n```java\r\nRestClientFactory.getClient().getAsync(\r\n    new ContextAwareAPIDelegate<Target>(context, Target.class, RequestCache.LoadPolicy.LOAD_IF_OFFLINE) {\r\n\r\n...\r\n\r\n}, \"http://url/%s/%s\", \"param1\", \"param2\");\r\n```\r\n\r\n#### Load Policies\r\n\r\nThe cache load policies available are:\r\n\r\n* NEVER - Never use the cache.\r\n* LOAD_IF_OFFLINE - Load from the cache when the app is offline.\r\n* LOAD_ON_ERROR - Load from cache if there is an error.\r\n* ETAG - Load from the cache if we have data stored and the server returns a 304 (not modified) response.\r\n* ENABLED - Load always from the cache if available.\r\n* LOAD_IF_TIMEOUT - Load from the cache when the request times out.\r\n* NETWORK_ENABLED - Load from the cache then refresh the cache with a network call (calls onResult in the APIDelegate twice)\r\n\r\n#### Direct access\r\n\r\nAccess objects in the cache, invalidate, put and perform many other operations directly via the static methods at\r\n[org.restrung.rest.cache.RequestCache](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/cache/RequestCache.java) class.\r\n\r\n### Serialization\r\n\r\nRestrung comes with abstract classes that implement most of the tedious work related to serialize/deserialize [javabeans](http://en.wikipedia.org/wiki/JavaBeans) from and to [JSON](http://en.wikipedia.org/wiki/JSON).\r\nTo have your beans autoserialized when being sent as a request body in both POST and PUT request make your class extend from\r\n[org.restrung.rest.marshalling.request.AbstractJSONRequest](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/marshalling/request/AbstractJSONRequest.java) or provide your\r\nown implementation of [org.restrung.rest.marshalling.request.JSONSerializable](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/marshalling/request/JSONSerializable.java)\r\n\r\nTo have your beans autoserialized when receiving a response body in make your class extend from\r\n[org.restrung.rest.marshalling.response.AbstractJSONResponse](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/marshalling/response/AbstractJSONResponse.java) or provide your\r\nown implementation of [org.restrung.rest.marshalling.response.JSONResponse](https://github.com/47deg/restrung/blob/master/src/main/java/org/restrung/rest/marshalling/response/JSONResponse.java)\r\n\r\n### Interceptors\r\n\r\nYou can customize the request before being sent by overriding **onRequest(RequestOperation)** in your APIDelegate.\r\nSame applies for the response before being serialized. Simply override **onResponse(ResponseOperation)** in your APIDelegate.\r\n\r\ne.g.\r\n\r\n```java\r\nRestClientFactory.getClient().getAsync(new ContextAwareAPIDelegate<Target>(context, Target.class) {\r\n\r\n    ...\r\n\r\n    public void onRequest(RequestOperation operation) {\r\n        //add request headers, setup basic auth, ...\r\n    }\r\n\r\n    public void onResponse(ResponseOperation operation) {\r\n        // intercept status code, ...\r\n    }\r\n\r\n}, \"http://url/%s/%s\", \"param1\", \"param2\");\r\n```\r\n\r\n\r\n\r\n","name":"Restrung","tagline":"Android client library for RESTful services","google":"UA-18433785-2","note":"Don't delete this file! It's used internally to help with page regeneration."}