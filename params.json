{"name":"Appsly Android REST","tagline":"Android library for RESTful services","body":"# Appsly Android REST\r\n\r\nAsync Android client library for [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer) services.\r\n\r\n# Introduction\r\n\r\nDo you have the need to connect to a REST api with you Android Application and have the responses automatically serialized to Java beans?\r\nLook no more! You found it.\r\n\r\nAppsly Android REST is a annotation based client library for RESTful services with an emphasis in simplicity and performance that automatically handles the\r\nimplementation for most common REST use cases. Easily handle GET, POST, PUT and DELETE requests in an elegant way.\r\n\r\n# Getting Started\r\n\r\nAppsly Android REST allows you to declare your operations as annotated Java methods on a Java interface that you don't have to implement yourself.\r\nThe interface is used to generate a automatically a proxy instance that does the actual work and taking care of all the implementation details.\r\n\r\nLet's say we were implementing the Open Weather Forecast API to get the weather forecast for the [47 Degrees]() office in Ballard, Seattle.\r\nWe would need to fetch json from this http endpoint and convert it's response to our Java model.\r\nThis is how we'd do it.\r\n\r\nhttp://api.openweathermap.org/data/2.5/weather?lat=47.663267&lon=-122.384187\r\n\r\n```java\r\n\r\n@RestService\r\npublic interface OpenWeatherAPI {\r\n\r\n    @GET(\"/weather\")\r\n    void getForecast(@QueryParam(\"lat\") double latitude, @QueryParam(\"lon\") double longitude, Callback<ForecastResponse> callback);\r\n\r\n}\r\n\r\n```\r\n\r\n```java\r\n\r\npublic class ForecastResponse {\r\n\r\n    private String name;\r\n\r\n    ... getters and setters ...\r\n\r\n}\r\n\r\n```\r\n\r\n```java\r\n\r\nRestClient client = RestClientFactory.defaultClient(context);\r\nOpenWeatherAPI api = RestServiceFactory.getService(baseUrl, OpenWeatherAPI.class, client);\r\n// hold on to the api object for the lifecycle of your app or activity context\r\n\r\n```\r\n\r\n```java\r\n// somewhere else in your code\r\n\r\napi.getForecast(47.663267, -122.384187, new Callback<WeatherResponse>() {\r\n\r\n    @Override\r\n    public void onResponse(Response<WeatherResponse> response) {\r\n        // This will be invoke in the UI thread after serialization with your objects ready to use\r\n    }\r\n\r\n});\r\n\r\n```\r\n\r\n# Download\r\n\r\n## Gradle or Maven Dependency\r\n\r\nAppsly Android REST may be automatically imported into your project if you already use [Maven](http://maven.apache.org/) or the [Android Gradle Build System](http://tools.android.com/tech-docs/new-build-system/user-guide). Just declare Appsly Android REST as a maven dependency.\r\nIf you wish to always use the latest unstable snapshots, add the Clinker Snapshots repository where the Appsly Android REST snapshot artifacts are being deployed.\r\nAppsly Android REST official releases will be made available at Clinker and Maven Central as they become available\r\n\r\n**LATEST STABLE**\r\n\r\n*Maven*\r\n\r\n```xml\r\n<repository>\r\n    <id>public-releases</id>\r\n    <url>http://clinker.47deg.com/nexus/content/repositories/releases</url>\r\n    <releases>\r\n        <enabled>true</enabled>\r\n        <updatePolicy>daily</updatePolicy>\r\n        <checksumPolicy>fail</checksumPolicy>\r\n    </releases>\r\n</repository>\r\n\r\n<dependency>\r\n    <groupId>ly.apps</groupId>\r\n    <artifactId>android-rest</artifactId>\r\n    <version>1.2</version>\r\n</dependency>\r\n```\r\n\r\n*Gradle*\r\n\r\n```groovy\r\ndependencies {\r\n    compile group: 'ly.apps', name: 'android-rest', version: '1.2'\r\n}\r\n```\r\n\r\n**SNAPSHOTS**\r\n\r\n*Maven*\r\n\r\n```xml\r\n<repository>\r\n    <id>public-snapshots</id>\r\n    <url>http://clinker.47deg.com/nexus/content/repositories/snapshots</url>\r\n    <snapshots>\r\n        <enabled>true</enabled>\r\n        <updatePolicy>daily</updatePolicy>\r\n        <checksumPolicy>fail</checksumPolicy>\r\n    </snapshots>\r\n</repository>\r\n\r\n<dependency>\r\n    <groupId>ly.apps</groupId>\r\n    <artifactId>android-rest</artifactId>\r\n    <version>1.2-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\n*Gradle*\r\n\r\n```groovy\r\ndependencies {\r\n    compile group: 'ly.apps', name: 'android-rest', version: '1.2-SNAPSHOT'\r\n}\r\n```\r\n\r\n# Configuration\r\n\r\n## Annotations\r\n\r\n### @RestService\r\n\r\nIndicates an interface is to be proxied and its methods mapped to rest operations\r\n\r\n```java\r\n@RestService\r\npublic interface MyAwesomeService {\r\n...\r\n}\r\n```\r\n\r\n### @GET\r\n\r\nIndicates a method is mapped to an HTTP GET request\r\n\r\n```java\r\n@GET(\"/resource/{id}\")\r\nvoid fetch(@Path(\"id\") String id);\r\n```\r\n\r\n### @POST\r\n\r\nIndicates a method is mapped to an HTTP POST request\r\n\r\n```java\r\n@POST(\"/resource\")\r\nvoid add(@Body MyRequest request);\r\n```\r\n\r\n### @PUT\r\n\r\nIndicates a method is mapped to an HTTP PUT request\r\n\r\n```java\r\n@PUT(\"/resource\")\r\nvoid fetch(@Body MyRequest request);\r\n```\r\n\r\n### @DELETE\r\n\r\nIndicates a method is mapped to an HTTP DELETE request\r\n\r\n```java\r\n@DELETE(\"/resource/{id}\")\r\nvoid remove(@Path(\"id\") String id);\r\n```\r\n\r\n### @Path\r\n\r\nIndicates a method arg is a path parameter in the url\r\n\r\n```java\r\n@GET(\"/resource/{id}\")\r\nvoid fetc(@Path(\"id\") String id);\r\n```\r\n\r\n### @QueryParam\r\n\r\nIndicates a method arg is a query parameter in the url query string\r\n\r\n```java\r\n@GET(\"/resource/list\")\r\nvoid list(@QueryParam(\"limit\") int limit);\r\n```\r\n\r\n### @QueryParams\r\n\r\nIndicates a method arg is a bean including properties that will be mapped to query parameters in the url query string\r\n\r\n```java\r\n@GET(\"/resource/list\")\r\nvoid list(@QueryParams PaginationInfo paginationInfo);\r\n```\r\n\r\n### @FormField\r\n\r\nIndicates a method arg is mapped to a post parameter\r\n\r\n```java\r\n@POST(\"/account\")\r\nvoid update(@FormField String username);\r\n```\r\n\r\n### @FormData\r\n\r\nIndicates a method arg is a bean including properties that will be mapped to post parameters\r\n\r\n```java\r\n@POST(\"/account/settings\")\r\nvoid updateSettings(@FormData AccountSettings settings);\r\n```\r\n\r\n### @Header\r\n\r\nIndicates a method arg should be sent as a request header\r\n\r\n```java\r\n@GET(\"/resource/list\")\r\nvoid list(@Header(\"X-AuthToken\") String token);\r\n```\r\n\r\n### @Cached\r\n\r\nIndicates a method is mapped to a REST operation whose response may be cached.\r\nFor more details on caching see [Cache](#Cache)\r\n\r\n```java\r\n@Cached\r\n@GET(\"/resource/list\")\r\nvoid list();\r\n```\r\n\r\n## Cache\r\n\r\nAppsly Android REST is built with performance and flexibility in mind.\r\nIt includes a cache mechanism to help with fast retrieval, caching and reusing of serialized responses.\r\n\r\nTo mark a method as @Cached you can simply annotate it providing the optional type of cache and time to live for the cached serialized response.\r\n\r\nIn the following example the Forecast information will be loaded from the cache not hitting the server if requested within 10 minutes of the first time it was requested.\r\nAfter the 10 minutes pass the cache will be invalidated and reloaded. This means your users will not have to wait for your Activity to load and connect to the internet each\r\ntime a user visits the weather forecast for that location. Think battery saving on your application and a better end user experience.\r\n\r\n```java\r\n\r\n@GET(\"/weather\")\r\n@Cached(policy = CachePolicy.ENABLED, timeToLive = 10 * 60 * 1000)\r\nvoid getForecast(@QueryParam(\"lat\") double latitude, @QueryParam(\"lon\") double longitude, Callback<ForecastResponse> callback);\r\n\r\n```\r\n\r\n### Policies\r\n\r\nThe cache policies available are:\r\n\r\n* NEVER - Never use the cache.\r\n* LOAD_IF_OFFLINE - Load from the cache when the app is offline.\r\n* LOAD_ON_ERROR - Load from cache if there is an error.\r\n* ENABLED - Load always from the cache if available.\r\n* LOAD_IF_TIMEOUT - Load from the cache when the request times out.\r\n* NETWORK_ENABLED - Load from the cache then refresh the cache with a network call (may call onResponse in the callback twice)\r\n\r\nThe NETWORK_ENABLED policy is particularly useful for use cases where you may display stale data on a Activity or Fragment but immediately refresh it\r\nif the content has changed since it was last requested.\r\n\r\n## Serialization\r\n\r\nAppsly Android REST ships with the popular library [Jackson]() for serialization and deserialization by default but provides\r\noverridable service definitions to allow for customization or plugin in different implementations\r\n\r\n### Path &amp; Query Params Converter\r\n\r\nThe query and path param converter serializes method args into the final url and query string used to perform the\r\nrequest.\r\n\r\nTo provide a custom implementation override [ly.apps.android.rest.converters.QueryParamsConverter]() and construct the RestClient\r\nby passing it as argument.\r\n\r\n```java\r\nQueryParamsConverter customQueryParamsConverter = new MyCustomQueryParamsConverter();\r\nRestClient client = new DefaultRestClientImpl(httpClient, customQueryParamsConverter, bodyConverter);\r\n```\r\n\r\n### Request and Response Body Converters\r\n\r\nThe Body Converter serializes and deserializes Beans and Objects into JSON, Post params, etc. both for Request and Response bodies\r\n\r\nTo provide a custom implementation override [ly.apps.android.rest.converters.BodyConverter]() and construct the RestClient\r\nby passing it as argument to the DelegatingConverterService which is also the default body converter.\r\nThe DelegatingConverterService evaluates all added converter in orders looking for candidates to handle the body.\r\n\r\n```java\r\nDelegatingConverterService bodyConverter = new DelegatingConverterService(){{\r\n    addConverter(new MyCustomBodyConverter());\r\n    addConverter(new JacksonBodyConverter());\r\n    addConverter(new JacksonHttpFormValuesConverter());\r\n}};\r\nRestClient client = new DefaultRestClientImpl(httpClient, queryParamsConverter, bodyConverter);\r\n```\r\n\r\n## Async http client\r\n\r\nAppsly Android REST uses the popular [AsyncHttpClient]() under the hood.\r\n\r\nYou may also provide customization to the http client such as providing default headers, enabling a lower level http response cache, etc.\r\n\r\nE.g. To customize the http client configuration you may simply pass your customized instance to the RestClient.\r\nIn the case below, the default in the lib, the lower level http client [http response](http://developer.android.com/reference/org/apache/http/HttpResponse.html) cache is enabled.\r\nAlso the serialized entity cache is enabled as well and the Persistent Cache Manager based on [LRUDiskCache]\r\n\r\n```java\r\nRestClient client = new DefaultRestClientImpl(\r\n    new CacheAwareHttpClient(new ContextPersistentCacheManager(context)) {{\r\n        enableHttpResponseCache(10 * 1024 * 1024, new File(context.getCacheDir(), \"android-rest-http\"));\r\n    }},\r\n    new JacksonQueryParamsConverter(),\r\n    new DelegatingConverterService(){{\r\n        addConverter(new JacksonBodyConverter());\r\n        addConverter(new JacksonHttpFormValuesConverter());\r\n    }}\r\n);\r\n```\r\n\r\n## Request &amp; Response Lifecycle\r\n\r\nCallback are instances of the [ResponseHandlerInterface]() and as such they allow for overriding the response lifecycle methods\r\nto get progress notifications, intercepting serialization at a lower level, manipulating headers, results and failures.\r\n\r\n\r\n# Credits\r\n\r\nAppsly Android REST is a library maintained by the [47 Degrees] team and part of the OS Framework [apps.ly Reaktor](http://reaktor.apps.ly)\r\nAppsly Android REST is inspired by other libs and projects such as [Android Async Http Client](), [Jackson](Jackson), [Retrofit](), [LRUDiskCache](), etc.\r\n\r\n# License\r\n\r\nCopyright (C) 2013 47 Degrees, LLC\r\nhttp://47deg.com\r\nhello@47deg.com\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n     http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n\r\n\r\n","google":"UA-18433785-2","note":"Don't delete this file! It's used internally to help with page regeneration."}